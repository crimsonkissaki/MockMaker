<?php

/**
 * Default mock unit test template code
 *
 * @package:    MockMaker
 * @author:     Evan Johnson
 * @created:    5/1/15
 */

$unitTestCode = <<<UNITTESTCODE
<?php

/**
 * {$dataPoints['ClassMockName']}
 *
 * Automatically generated by MockMaker.
 *
 * @author      MockMaker
 * @created     {$dataPoints['CreatedDate']}
 */

namespace {$dataPoints['NameSpace']};

{$dataPoints['UseStatements']}

class {$dataPoints['ClassMockName']} extends \PHPUnit_Framework_TestCase
{

    public function test_getMock_returnsValid{$dataPoints['ClassName']}MockWithNoArgument()
    {
        \$actual = {$dataPoints['ClassMockName']}::getMock();
        \$this->assertTrue(\$actual instanceof {$dataPoints['ClassName']});
    }

    public function test_getMock_returnsValid{$dataPoints['ClassName']}MockWithValidArgument()
    {
        \$args = array(
        // need to randomly pick a few properties that have
        // knowable data types so we can pick random values
        );
        \$actual = {$dataPoints['ClassMockName']}::getMock(\$args);
        \$this->assertTrue(\$actual instanceof {$dataPoints['ClassName']});
        // have to use random properties in the asserts
        \$this->assertEquals(\$args['id'], \$actual->getId());
        \$this->assertEquals(\$args['totalPoints'], \$actual->getTotalPoints());
    }

}

UNITTESTCODE;

return $unitTestCode;




