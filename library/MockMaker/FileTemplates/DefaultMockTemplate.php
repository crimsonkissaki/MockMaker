<?php

/**
 * Default mock template code
 *
 * @package:    MockMaker
 * @author :     Evan Johnson
 * @created:    5/1/15
 */

$mockCode = <<<MOCKCODE
<?php

/**
 * {$dataPoints['ClassMockName']}
 *
 * Automatically generated by MockMaker.
 *
 * @author      MockMaker
 * @created     {$dataPoints['CreatedDate']}
 */

namespace {$dataPoints['NameSpace']};

{$dataPoints['UseStatements']}

class {$dataPoints['ClassMockName']}
{

    /**
     * Minimum required properties for generating a valid {$dataPoints['ClassName']} mock file
     *
     * Associative array of {$dataPoints['ClassName']}'s elements which allows for simple customization
     * of how the class mock is hydrated.
     *
     * If the 'setter' element of a property array is either not present or set to boolean false,
     * MockMaker assumes the setter is in the standard 'setPropertyName' format.
     *
     * @var array
     */
    public static \$mandatoryProperties = array(
{$dataPoints['PropertiesAndSettersArray']}
        // format: 'propertyName' => array( 'setter' => 'setterMethodName', 'default' => 'defaultValue' ),
    );

    /**
     * Customized generation of mock {$dataPoints['ClassName']} objects
     *
     * @param	array|null  \$properties
     * null (default): Returns a 'bare bones' mock. Any properties in the
     * 'mandatoryProperties' array will be hydrated based on the defined
     * 'setter' method and 'default' value.
     *
     * array: Associative array in 'property' => 'value' format.
     * Returns a mock hydrated with given values for given properties.
     * Any properties specified in the 'mandatoryProperties' array that are
     * not supplied in the array will be hydrated based on the defined 'setter'
     * method and 'default' value.
     *
     * @param	array|null  \$ignore
     * Properties that you want getMock() to completely ignore while
     * hydrating the mock object. Overrides properties defined in the
     * 'mandatoryProperties' array.
     *
     * @return	{$dataPoints['ClassName']}
     */
    public static function getMock(\$properties = null, \$ignore = null)
    {
        \$mock = new {$dataPoints['ClassName']}();
        if( reflection ) {
        \$reflection = new \ReflectionClass('{$dataPoints['ClassPath']}');
        }

{$dataPoints['SetterCode']}
{$dataPoints['ReflectionCode']}

        return \$mock;
    }

}

MOCKCODE;

return $mockCode;
